{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-bluetooth-serial/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_bluetooth_serial */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-bluetooth-serial/lib.npmtest_cordova_plugin_bluetooth_serial.js":"/* istanbul instrument in package npmtest_cordova_plugin_bluetooth_serial */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_bluetooth_serial = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_bluetooth_serial = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-bluetooth-serial/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-bluetooth-serial && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_bluetooth_serial */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_bluetooth_serial\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_bluetooth_serial.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_bluetooth_serial.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_bluetooth_serial.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_bluetooth_serial.__dirname + '/lib.npmtest_cordova_plugin_bluetooth_serial.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-bluetooth-serial/node_modules/cordova-plugin-bluetooth-serial/www/bluetoothSerial.js":"/*global cordova*/\nmodule.exports = {\n\n    connect: function (macAddress, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"connect\", [macAddress]);\n    },\n\n    // Android only - see http://goo.gl/1mFjZY\n    connectInsecure: function (macAddress, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"connectInsecure\", [macAddress]);\n    },\n\n    disconnect: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"disconnect\", []);\n    },\n\n    // list bound devices\n    list: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"list\", []);\n    },\n\n    isEnabled: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"isEnabled\", []);\n    },\n\n    isConnected: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"isConnected\", []);\n    },\n\n    // the number of bytes of data available to read is passed to the success function\n    available: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"available\", []);\n    },\n\n    // read all the data in the buffer\n    read: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"read\", []);\n    },\n\n    // reads the data in the buffer up to and including the delimiter\n    readUntil: function (delimiter, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"readUntil\", [delimiter]);\n    },\n\n    // writes data to the bluetooth serial port\n    // data can be an ArrayBuffer, string, integer array, or Uint8Array\n    write: function (data, success, failure) {\n\n        // convert to ArrayBuffer\n        if (typeof data === 'string') {\n            data = stringToArrayBuffer(data);\n        } else if (data instanceof Array) {\n            // assuming array of interger\n            data = new Uint8Array(data).buffer;\n        } else if (data instanceof Uint8Array) {\n            data = data.buffer;\n        }\n\n        cordova.exec(success, failure, \"BluetoothSerial\", \"write\", [data]);\n    },\n\n    // calls the success callback when new data is available\n    subscribe: function (delimiter, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"subscribe\", [delimiter]);\n    },\n\n    // removes data subscription\n    unsubscribe: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"unsubscribe\", []);\n    },\n\n    // calls the success callback when new data is available with an ArrayBuffer\n    subscribeRawData: function (success, failure) {\n\n        successWrapper = function(data) {\n            // Windows Phone flattens an array of one into a number which\n            // breaks the API. Stuff it back into an ArrayBuffer.\n            if (typeof data === 'number') {\n                var a = new Uint8Array(1);\n                a[0] = data;\n                data = a.buffer;\n            }\n            success(data);\n        };\n        cordova.exec(successWrapper, failure, \"BluetoothSerial\", \"subscribeRaw\", []);\n    },\n\n    // removes data subscription\n    unsubscribeRawData: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"unsubscribeRaw\", []);\n    },\n\n    // clears the data buffer\n    clear: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"clear\", []);\n    },\n\n    // reads the RSSI of the *connected* peripherial\n    readRSSI: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"readRSSI\", []);\n    },\n\n    showBluetoothSettings: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"showBluetoothSettings\", []);\n    },\n\n    enable: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"enable\", []);\n    },\n\n    discoverUnpaired: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"discoverUnpaired\", []);\n    },\n\n    setDeviceDiscoveredListener: function (notify) {\n        if (typeof notify != 'function')\n            throw 'BluetoothSerial.setDeviceDiscoveredListener: Callback not a function';\n\n        cordova.exec(notify, null, \"BluetoothSerial\", \"setDeviceDiscoveredListener\", []);\n    },\n\n    clearDeviceDiscoveredListener: function () {\n        cordova.exec(null, null, \"BluetoothSerial\", \"clearDeviceDiscoveredListener\", []);\n    },\n\n    setName: function (newName) {\n        cordova.exec(null, null, \"BluetoothSerial\", \"setName\", [newName]);\n    },\n\n    setDiscoverable: function (discoverableDuration) {\n        cordova.exec(null, null, \"BluetoothSerial\", \"setDiscoverable\", [discoverableDuration]);\n    }\n\n\n};\n\nvar stringToArrayBuffer = function(str) {\n    var ret = new Uint8Array(str.length);\n    for (var i = 0; i < str.length; i++) {\n        ret[i] = str.charCodeAt(i);\n    }\n    return ret.buffer;\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-bluetooth-serial/node_modules/cordova-plugin-bluetooth-serial/src/browser/bluetoothSerial.js":"// This implementation is for testing in the brower. Future implemetations *might* be able to use\n// Chrome Bluetooth APIs https://developer.chrome.com/apps/bluetooth or Web Bluetooth.\n\n// Code from PhracturedBlue https://github.com/don/BluetoothSerial/issues/115\n\n// When using the browser, it is necessary to have a processing function that\n// can emulate the bluetooth device.\n\n// Use the 'register' function as follows:\n//\n// bluetoothSerial.register(function(buf) {\n//      //buf.input is the data that was received via bluetoothSerial.write\n//      //buf.output is data that will be transmitted via a bluetoothSerial.read or subscribe\n//      //Do processing here\n//      buf.input = \"\"\n// });\n\n// Function emulates a Bluetooth device echoing back input\n//\n// var echoProxy = function(buf) {\n//   if (buf && buf.input) {\n//     console.log(\"Received: \" + buf.input);\n//     buf.output = buf.input + \"\\n\";\n//     buf.input = \"\"; // clear input\n//   }\n//   return buf;\n// }\n// bluetoothSerial.register(echoProxy);\n\nmodule.exports = (function() {\n    var connected = false;\n    var enabled = true;\n    var buf = {\n        input: \"\",\n        output: \"\",\n        };\n    var subscribe_cb = function(value) {};\n    var raw_cb = false;\n    var subscribe_delim = false;\n    var interval;\n    var process_cb;\n\n    var btlog = function(str) { console.log(str); }\n    var timer_cb = function() {\n        if(process_cb) {\n            process_cb(buf);\n        }\n        if (buf.output.length) {\n            if(subscribe_delim) {\n                var index = buf.output.indexOf(subscribe_delim);\n                if (index > -1) {\n                    var data = buf.output.substr(0, index+subscribe_delim.length);\n                    buf.output = buf.output.substr(index+subscribe_delim.length);\n                    subscribe_cb(data);\n                }\n            }\n        }\n    };\n    return {\n        connect : function(mac, success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.connect: \" + mac);\n            connected = true;\n            if (success_cb) { success_cb(); }\n        },\n        register : function(data_cb) {\n            interval = window.setInterval(timer_cb, 100);\n            process_cb = data_cb;\n        },\n        disconnect : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.disconnect\");\n            connected = false;\n            window.clearInterval(interval);\n            if (success_cb) { success_cb(); }\n        },\n        write : function(data, success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.write: \" + data);\n            buf.input += data;\n            if(success_cb) { success_cb(); }\n        },\n        available : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.available\");\n            success_cb(buf.output.length);\n        },\n        read : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.read: \" + buf.output);\n            var data = buf.output;\n            buf.output = \"\";\n            success_cb(data);\n        },\n        readUntil : function(delimiter, success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.readUntil\");\n            var index = buf.output.indexOf(delimiter);\n            if (index == -1) {\n                success_cb(\"\");\n            } else {\n                var data = buf.output.substr(0, index+subscribe_delim.length);\n                buf.output = buf.output.substr(index+subscribe_delim.length);\n                success_cb(data);\n            }\n        },\n        subscribe : function(delimiter, success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.subscribe '\"+delimiter+\"'\");\n            subscribe_cb = success_cb;\n            subscribe_delim = delimiter;\n        },\n        unsubscribe : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.unsubscribe\");\n            subscribe_delim = false;\n            if(success_cb) { success_cb(); }\n        },\n        subscribeRawData : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.subscribeRawData\");\n            raw_cb = success_cb;\n        },\n        unsubscribeRawData : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.unsubscribeRawData\");\n            raw_cb = false;\n            if(success_cb) { success_cb(); }\n        },\n        clear : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.clear\");\n            buf.output = \"\";\n            if(success_cb) { success_cb(); }\n        },\n        list : function(success_cb, fail_cb) {\n          var devices = [{\n              \"class\": 276,\n              \"id\": \"10:BF:48:CB:00:00\",\n              \"address\": \"10:BF:48:CB:00:00\",\n              \"name\": \"Nexus 7\"\n          }, {\n              \"class\": 7936,\n              \"id\": \"00:06:66:4D:00:00\",\n              \"address\": \"00:06:66:4D:00:00\",\n              \"name\": \"RN42\"\n          }]\n          success_cb(devices);        },\n        isConnected : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.isConnected: \" + connected);\n            if(connected) {\n                if(success_cb) { success_cb(); }\n            } else {\n                if(fail_cb) { fail_cb(); }\n            }\n        },\n        isEnabled : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.isEnabled: \" + enabled);\n            if(enabled) {\n                if(success_cb) { success_cb(); }\n            } else {\n                if(fail_cb) { fail_cb(); }\n            }\n        },\n        readRSSI : function(success_cb, fail_cb) {\n            alert(\"bluetoothSerial.readRSSI is not implemented\");\n        },\n        showBluetoothSettings : function(success_cb, fail_cb) {\n            alert(\"bluetoothSerial.showBluetoothSettings is not implemented\");\n        },\n        enable : function(success_cb, fail_cb) {\n            btlog(\"bluetoothSerial.enable\");\n            enable = true;\n            if(success_cb) { success_cb(); }\n        },\n        discoverUnpaired : function(success_cb, fail_cb) {\n            alert(\"bluetoothSerial.discoverUnpaired is not implemented\");\n        },\n    }\n})();\n"}